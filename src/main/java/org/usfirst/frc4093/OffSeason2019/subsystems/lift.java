// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4093.OffSeason2019.subsystems;


import org.usfirst.frc4093.OffSeason2019.Robot;
import org.usfirst.frc4093.OffSeason2019.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class lift extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX talonSRX1;
    private DigitalInput liftLow;
    private DigitalInput liftCenter;
    private DigitalInput liftHigh;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int lastLiftLimit;
    public double encoder;
    private double difference;
    public boolean holdEnabled = true; //set to false to disable hold4
    public int recordedDir;
    public int currentDir;
    public lift() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        talonSRX1 = new WPI_TalonSRX(6);
        
        
        
        liftLow = new DigitalInput(1);
        addChild("Lift Low",liftLow);
        
        
        liftCenter = new DigitalInput(2);
        addChild("Lift Center",liftCenter);
        
        
        liftHigh = new DigitalInput(3);
        addChild("Lift High",liftHigh);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new axisMoveLift());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }
    public void move(double speed){
        talonSRX1.set(-speed); //set to -speed so controls are easy
    }
    public void moveUp(double speed){
        if (getLimit() != 3){
            move(speed);
            currentDir = 1;
        }else{
            hold();
        }
    }
    public void moveDown(double speed){
        if (getLimit() != 1){
            move(speed*1);//switch back to .25
            currentDir = -1;
        }else{
            hold();
        }
    }
    public void hold() {
        if (getLimit() != 1 && holdEnabled){
            talonSRX1.set(-.15);
        }else{
            talonSRX1.set(0);
        }
       
    }
    public int getLimit(){
        if (!liftLow.get()) {
            lastLiftLimit = 1;
            return 1;
        }
        if (!liftCenter.get()){
            lastLiftLimit = 2;
            recordedDir = currentDir;
            return 2;
        }
        if (!liftHigh.get()) {
            lastLiftLimit = 3;
            return 3;
        }
        return 0;
    }
    public boolean goToLocation (double location){
        boolean done = false;
        if (encoder < location) {
            moveUp(.5);
        }
        if (encoder > location) {
            moveDown(0);
        }
        if (encoder < location + 5000 && encoder > location - 5000) {
            hold();
            done = true;
        }
        return done;
    }
    public boolean goToMiddle() {
        if (getLimit() == 2) {
            return true; // all done
        }
        if (lastLiftLimit == 3) {
            moveDown(0); // lift down
        } else  { if (lastLiftLimit == 1) {
            moveUp(1); // lift up
            } else {
                if (recordedDir == -1) {
                    moveDown(0); // lift up
                } else {
                    moveDown(0); // lift down
                }
            }   
        }
        return false; // keep on going
    }
    /**
     * @return the encoder
     */
    public double getEncoder() {
        return encoder;
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop
         encoder = talonSRX1.getSensorCollection().getQuadraturePosition() - difference;
         getLimit();
        //System.out.println("Encoder: " + encoder + " Limit: " + getLimit());
        if (getLimit() == 1){
            difference = talonSRX1.getSensorCollection().getQuadraturePosition();
        }
        Robot.Dash.encoder = Robot.lift.getEncoder();
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

