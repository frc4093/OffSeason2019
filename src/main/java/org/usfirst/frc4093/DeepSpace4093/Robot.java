// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4093.DeepSpace4093;

import edu.wpi.first.cameraserver.CameraServer;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import edu.wpi.cscore.UsbCamera;
import edu.wpi.cscore.VideoMode.PixelFormat;
import org.usfirst.frc4093.DeepSpace4093.Dash;
//import com.sun.org.apache.xml.internal.dtm.Axis;
import edu.wpi.first.wpilibj.DriverStation;
import org.usfirst.frc4093.DeepSpace4093.commands.*;
import org.usfirst.frc4093.DeepSpace4093.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();

    public static OI oi;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static lift lift;
    public static Slider slider;
    public static ballGrabber ballGrabber;
    public static hatchGrabber hatchGrabber;
    public static arm arm;
    public static Drive drive;
    public static accessDashBoard accessDashBoard;
    public static Lights lights;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static Dash Dash;
    //my variables
    public int encoderReading;
    UsbCamera cam1,cam2,cam3;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {

        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        lift = new lift();
        slider = new Slider();
        ballGrabber = new ballGrabber();
        hatchGrabber = new hatchGrabber();
        arm = new arm();
        drive = new Drive();
        accessDashBoard = new accessDashBoard();
        lights = new Lights();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        Dash = new Dash();
        // OI must be constructed after subsystems. If the OI creates Commands
        //(which it very likely will), subsystems are not guaranteed to be
        // constructed yet. Thus, their requires() statements may grab null
        // pointers. Bad news. Don't move it.
        oi = new OI();
        
        cam1 = CameraServer.getInstance().startAutomaticCapture(0);
        cam2 = CameraServer.getInstance().startAutomaticCapture(1);
        cam3 = CameraServer.getInstance().startAutomaticCapture(2);
        cam1.setVideoMode(PixelFormat.kMJPEG, 320, 240, 10);
        cam2.setVideoMode(PixelFormat.kMJPEG, 320, 240, 10);
        cam3.setVideoMode(PixelFormat.kMJPEG, 160, 120, 10);
        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.setDefaultOption("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
        Dash.displayData("Match", DriverStation.getInstance().getMatchType() + " " + DriverStation.getInstance().getMatchNumber() );
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
        Robot.Dash.updateDashBoard();
        Robot.Dash.voltage =  DriverStation.getInstance().getBatteryVoltage();
        Robot.Dash.time = DriverStation.getInstance().getMatchTime();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
        Robot.Dash.updateDashBoard(); //update dashboard
        Robot.Dash.voltage =  DriverStation.getInstance().getBatteryVoltage();
        Robot.Dash.time = DriverStation.getInstance().getMatchTime();
    }
}
