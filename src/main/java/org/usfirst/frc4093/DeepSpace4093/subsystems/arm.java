// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

package org.usfirst.frc4093.DeepSpace4093.subsystems;

import org.usfirst.frc4093.DeepSpace4093.Robot;
import org.usfirst.frc4093.DeepSpace4093.commands.*;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.PIDSource;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import edu.wpi.first.wpilibj.DigitalInput;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS

/**
 *
 */
public class arm extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private WPI_TalonSRX armMotor;
    private DigitalInput downLimit;
    private DigitalInput middleLimit;
    private DigitalInput upLimit;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public int lastLimitRecorded = 0;
    public int recordedDir = 1;
    public int currentDir = 1;

    // limits you can edit with set commands
    private int topLimit = 3;
    private int midLimit = 2;
    private int bottomLimit = 1;

    public arm() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        armMotor = new WPI_TalonSRX(8);
        
        
        
        downLimit = new DigitalInput(4);
        addChild("downLimit",downLimit);
        
        
        middleLimit = new DigitalInput(7);
        addChild("middleLimit",middleLimit);
        
        
        upLimit = new DigitalInput(5);
        addChild("upLimit",upLimit);
        
        

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }

    public void armUp() {

        if (getLimit() != topLimit && getLimit() != 3) {
            armMotor.set(1);
            currentDir = 1;
            // System.out.println("Moving up");
        } else {
            holdPosition();
        }

    }

    public void armDown() {
        if (Robot.oi.leftJoystick.getRawButton(2)) {
            armMotor.set(-1);
            currentDir = -1;
        } else {
            if (getLimit() != bottomLimit && getLimit() != 1) {
                armMotor.set(-1);
                currentDir = -1;
                // System.out.println("Moving down");
            } else {
                holdPosition();
            }
        }

    }

    public void holdPosition() {

        if (getLimit() != 3) {
            armMotor.set(.1);
            // System.out.println("Holding");
        } else {
            stop();
            // System.out.println("no power");
        }
    }

    public void stop() {
        armMotor.set(0);
    }

    public int getLimit() {
        if (!downLimit.get()) {
            lastLimitRecorded = 1;
            return 1;
        }
        if (!upLimit.get()) {
            lastLimitRecorded = 3;
            return 3;
        }
        if (!middleLimit.get()) {
            recordedDir = currentDir;
            lastLimitRecorded = 2;
            return 2;
        }
        return 0;
    }

    // public void goToMiddle() {
    // if (lastLimitRecorded != 3) {
    // armUp();
    // } else {
    // armDown();
    // }
    // }
    // set commands for limits
    public void setBottomLimit(int bottomLimit) {
        this.bottomLimit = bottomLimit;
    }

    public void setTopLimit(int topLimit) {
        this.topLimit = topLimit;
    }

    public void setMidLimit(int midLimit) {
        this.midLimit = midLimit;
    }

    public void setAll(int bottomLimit, int midLimit, int topLimit) {
        setBottomLimit(bottomLimit);
        setMidLimit(midLimit);
        setTopLimit(topLimit);
    }

    public boolean goToMiddle() {
        if (getLimit() == 2) {
            holdPosition();
            return true; // all done
        }
        if (lastLimitRecorded == 3) {
            armDown(); // arm down
        } else  { if (lastLimitRecorded == 1) {
            armUp(); // arm up
            } else {
                if (recordedDir == -1) {
                    armUp(); // arm up
                } else {
                    armDown(); // arm down
                }
            }   
        }
        return false; // keep on going
    }

    public int getBottomLimit() {
        return bottomLimit;
    }

    /**
     * @return the middleLimit
     */
    public int getMidLimit() {
        return midLimit;
    }

    /**
     * @return the topLimit
     */
    public int getTopLimit() {
        return topLimit;
    }
    public void dumbDown(){
        getLimit();
        armMotor.set(-1);
        currentDir = -1;
    }

    public void safety() {
         // store some usefull information(helps shorten code)
         int lastLiftSwitch = Robot.lift.lastLiftLimit; // last limit seen on lift
         // int currentLiftSwitch = Robot.lift.getLimit(); //unused
         int liftDir = Robot.lift.recordedDir; // direction when passing last limit seen on lift
         int slideSwitch = Robot.slider.getLimit(); // sliders current limit
         
         if (slideSwitch != 2) {
            Robot.Dash.displayData("Cargo side", false);
             // lift is above middle
             if (lastLiftSwitch > 2 || (lastLiftSwitch == 2 && liftDir == 1)) {
                 armDown();
             } else {
                 goToMiddle();
             }
         } else{
             holdPosition();
             Robot.Dash.displayData("Cargo side", true);
         }
    }
    @Override
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        setDefaultCommand(new ArmSafety());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        // Set the default command for a subsystem here.
        // setDefaultCommand(new MySpecialCommand());
    }

    @Override
    public void periodic() {
        // Put code here to be run every loop
        // System.out.println(getLimit());
    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CMDPIDGETTERS

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}
